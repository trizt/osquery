/*
 *  Copyright (c) 2014-present, Facebook, Inc.
 *  All rights reserved.
 *
 *  This source code is licensed under the BSD-style license found in the
 *  LICENSE file in the root directory of this source tree. An additional grant
 *  of patent rights can be found in the PATENTS file in the same directory.
 *
 */

/*
** This file is generated. Do not modify it manually!
*/

#include <osquery/events.h>
#include <osquery/logger.h>
#include <osquery/tables.h>

namespace osquery {

/// BEGIN[GENTABLE]
namespace tables {
{% if class_name == "" %}\
{% if generator %}\
void {{function}}(RowYield& yield, QueryContext& context);
{% else %}\
osquery::QueryData {{function}}(QueryContext& context);
{% endif %}\
{% else %}
class {{class_name}} {
 public:
  osquery::QueryData {{function}}(QueryContext& context);
};
{% endif %}\
}

class {{table_name_cc}}TablePlugin : public TablePlugin {
 private:
  TableColumns columns() const override {
    return {
{% for column in schema %}\
      std::make_tuple("{{column.name}}", {{column.type.affinity}},\
{% if column.options|length > 0 %} {{column.options_set}}\
{% else %} ColumnOptions::DEFAULT\
{% endif %}\
),
{% endfor %}\
    };
  }
{% if aliases|length > 0 %}\

  std::vector<std::string> aliases() const override {
    return {
{% for alias in aliases %}\
      "{{alias}}",
{% endfor %}\
    };
  }
{% endif %}\

{% if has_column_aliases %}\

  ColumnAliasSet columnAliases() const override {
    return {
{% for column in schema %}\
{% if column.aliases|length > 0 %}\
      {"{{column.name}}", {% raw %}{{% endraw %}\
{% for alias in column.aliases %}"{{alias}}"\
{% if not loop.last %}, {% endif %}\
{% endfor %}}},
{% endif %}\
{% endfor %}\
    };
  }
{% endif %}\

  TableAttributes attributes() const override {
    return \
{% for attribute in attribute_set %}\
      TableAttributes::{{attribute}} |\
{% endfor %}\
      TableAttributes::NONE;
  }

{% if generator %}\
  bool usesGenerator() const override { return true; }

  void generator(RowYield& yield, QueryContext& context) override {
    tables::{{function}}(yield, context);
  }
{% else %}\
  QueryData generate(QueryContext& context) override {
{% if class_name != "" %}\
    if (EventFactory::exists(getName())) {
      auto subscriber = EventFactory::getEventSubscriber(getName());
      return subscriber->{{function}}(context);
    } else {
      LOG(ERROR) << "Subscriber table missing: " << getName();
      return QueryData();
    }
{% else %}\
{% if attributes.cacheable %}\
    if (isCached(kCacheStep)) {
      return getCache();
    }
{% endif %}\
    auto results = tables::{{function}}(context);
{% if attributes.cacheable %}\
    setCache(kCacheStep, kCacheInterval, results);
{% endif %}
    return results;
{% endif %}\
  }
{% endif %}\

};

{% if attributes.utility %}
REGISTER_INTERNAL({{table_name_cc}}TablePlugin, "table", "{{table_name}}");
{% else %}
REGISTER({{table_name_cc}}TablePlugin, "table", "{{table_name}}");
{% endif %}
/// END[GENTABLE]

}
